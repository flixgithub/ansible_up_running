---
- name: run mezzanine from containers
  hosts: localhost
  gather_facts: yes
  vars_files:
    - secrets.yml
  vars:
    # The postgres container uses the same name for the database
    # and the user
    database_name: mezzanine
    database_user: mezzanine
    database_port: 5432
    gunicorn_port: 8000
    docker_host: "{{ lookup('env', 'DOCKER_HOST') | regex_replace('^tcp://(.*):\\d+$', '\\\\1') | default('localhost', true) }}"
    project_dir: /srv/project
    website_domain: "{{ docker_host }}"
    mezzanine_env:
      SECRET_KEY: "{{ secret_key }}"
      NEVERCACHE_KEY: "{{ nevercache_key }}"
      ALLOWED_HOSTS: "*"
      DATABASE_NAME: "{{ database_name }}"
      DATABASE_USER: "{{ database_user }}"
      DATABASE_PASSWORD: "{{ database_password }}"
      DATABASE_HOST: "{{ database_host }}"
      DATABASE_PORT: "{{ database_port }}"
      GUNICORN_PORT: "{{ gunicorn_port }}"
    setadmin_env:
      PROJECT_DIR: "{{ project_dir }}"
      ADMIN_PASSWORD: "{{ admin_password }}"
    setsite_env:
      PROJECT_DIR: "{{ project_dir }}"
      WEBSITE_DOMAIN: "{{ website_domain }}"

  tasks:
    - name: start the postgres container
      docker:
        image: postgres:9.4
        name: postgres
        publish_all_ports: True
        env:
          POSTGRES_USER: "{{ database_user }}"
          POSTGRES_PASSWORD: "{{ database_password }}"
    - name: capture database ip
      shell: "docker port `docker ps -f name=postgres | awk 'NR==2{print $1}'`| cut -d ' ' -f 3 | cut -d : -f 1"
      register: database_ip
    - name: capture database mapped port
      shell: "docker port `docker ps -f name=postgres | awk 'NR==2{print $1}'`| cut -d ' ' -f 3 | cut -d : -f 2"
      register: database_map_port
    - name: capture database ip address and mapped port
      set_fact:
        # database_host: "{{ docker_containers[0].NetworkSettings.IPAddress }}"
        # mapped_database_port: "{{ docker_containers[0].NetworkSettings.Ports['5432/tcp'][0].HostPort}}"
        database_host: "{{  ansible_docker0.ipv4.address }}"
        mapped_database_port: "{{ database_map_port.stdout }}"
        database_port: "{{ database_map_port.stdout }}"
    - name: show docker_containers value
      debug: var=database_host
    - name: wait for database to come up
      wait_for: host={{ database_host }} port={{ mapped_database_port }}
    - name: initialize database
      docker:
        image: bryan/mezzanine:latest
        command: python manage.py {{ item }} --noinput
        env: "{{ mezzanine_env }}"
        detach: False
        # links: postgres
      with_items:
        - syncdb
        - migrate
      register: django_result
    - name: debug manage result
      debug: var=django_result
    - name: set the site id
      docker:
        image: bryan/mezzanine:latest
        command: /srv/scripts/setsite.py
        env: "{{ setsite_env.update(mezzanine_env) }}{{ setsite_env }}"
        detach: False
    - name: set the admin password
      docker:
        image: bryan/mezzanine:latest
        command: /srv/scripts/setadmin.py
        env: "{{ setadmin_env.update(mezzanine_env) }}{{ setadmin_env }}"
        detach: False
    - name: start the memcached container
      docker:
        image: bryan/memcached:latest
        name: memcached
    - name: start the mezzanine container
      docker:
        image: bryan/mezzanine:latest
        #ports:
        #  - 8000:8000
        publish_all_ports: True     
        name: mezzanine
        env: "{{ mezzanine_env }}"
        links: memcached
    - name: start the mezzanine cron job
      docker:
        image: bryan/mezzanine:latest
        name: mezzanine
        env: "{{ mezzanine_env }}"
        command: cron -f
        detach: False
    - name: start the cert container
      docker:
        image: bryan/certs:latest
        name: certs
      tags:
        - certs
    - name: run nginx
      docker:
        image: bryan/nginx-mezzanine:latest
        expose: 
          - 8081
          - 443
        ports:
          - 8081:8081
          - 443:443
        name: nginx
        volumes_from:
          - mezzanine
          - certs
        links: mezzanine
      tags:
        - nginx
